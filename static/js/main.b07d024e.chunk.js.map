{"version":3,"sources":["utils/utils.js","components/Game.js","index.js"],"names":["calculateWinner","squares","lines","i","length","_lines$i","Object","slicedToArray","a","b","c","getWinningColors","colorClass","winners","map","cClass","forEach","x","replace","parseState","gameState","xStates","oStates","states","split","parseInt","some","isNaN","Square","props","react_default","createElement","className","textColorClass","onClick","value","Reload","boardReset","getXOAttr","idx","Array","fill","xIsNext","Game","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","match","params","state","_parseState","_parseState2","_getXOAttr","_getXOAttr2","inherits","createClass","key","history","push","setState","winningBlock","slice","join","getStateToken","_this2","Game_Square","handleClick","_this3","winner","status","statusClass","board","boardRow","renderSquare","Game_Reload","React","Component","ReactDOM","render","react_router_dom","react_router","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.b07d024e.chunk.js","sourcesContent":["const calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  let i = 0;\n  for (i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [a, b, c];\n    }\n  }\n  for (i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n        return null;\n    }\n  }\n  return 'Draw';\n};\n\nconst getWinningColors = (colorClass, winners) => {\n  if (winners === null || typeof winners === 'string') {\n    return colorClass\n  }\n  colorClass = colorClass.map(cClass => cClass + ' irrelevant-block') \n  winners.forEach(x => colorClass[x] = colorClass[x].replace('irrelevant-block', 'winning-block')) \n  return colorClass\n};\n\nconst parseState = (gameState) => {\n  const states = gameState.split('-');\n  let xStates,\n    oStates;\n  if (states.length !== 2) {\n    return null;\n  }\n  xStates = states[0].split('').map(x => parseInt(x, 10));\n  oStates = states[1].split('').map(x => parseInt(x, 10));\n  if ( xStates.some(x => isNaN(x)) || oStates.some(x => isNaN(x))) {\n    return null;\n  }\n  return [xStates, oStates]\n};\n\nexport {calculateWinner, getWinningColors, parseState}","import React from 'react';\nimport {calculateWinner, getWinningColors, parseState} from '../utils/utils'\n\nconst Square = (props) => {\n  return (\n    <button className={'square ' + props.textColorClass} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n};\n\nconst Reload = (props) => {\n  return (\n      <div className='reload'  onClick={props.boardReset}><i className=\"fas fa-redo-alt\"></i></div>\n  );\n};\n\nconst getXOAttr = (xStates, oStates) => {\n  let idx = 0,\n    squares = Array(9).fill(null),\n    colorClass = Array(9).fill(''),\n    xIsNext = xStates.length === oStates.length;\n    for ( idx = 0; idx < xStates.length; idx++ ) {\n      squares[xStates[idx]] = 'X';\n      colorClass[xStates[idx]] = 'red-color'; \n    }\n    for ( idx = 0; idx < oStates.length; idx++ ) {\n      squares[oStates[idx]] = 'O';\n      colorClass[oStates[idx]] = 'green-color';\n    }\n    return [squares, colorClass, xIsNext];\n};\nconst getStateToken = (squares) => {\n  let xStates = [],\n    oStates = [],\n    idx = 0;\n  for (idx in squares) {\n    if (squares[idx] === 'X') {\n      xStates.push(idx);  \n    }\n    else if (squares[idx] === 'O') {\n      oStates.push(idx);  \n    }\n  }\n  return xStates.join('') + '-' + oStates.join('');\n}\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const gameState = props.match.params.state;\n    let xStates = null,\n      oStates = null,\n      squares = Array(9).fill(null),\n      colorClass = Array(9).fill(''),\n      xIsNext = true;\n    if (typeof gameState !== 'undefined' && parseState(gameState) !== null) {\n      [xStates, oStates] = parseState(gameState);\n      if (xStates.length < oStates.length\n      || xStates.length > 5\n      || oStates.length > 4) { // As X always start the game, so these are some invalid state\n        xStates = null;\n        oStates = null;\n      } else {\n        [squares, colorClass, xIsNext] = getXOAttr(xStates, oStates);\n      }\n    }\n    this.state = {\n      squares: squares,\n      colorClass: colorClass,\n      xIsNext: xIsNext\n    }\n  }\n  \n  boardReset() {\n    this.props.history.push('/');\n    const squares = Array(9).fill(null),\n      colorClass = Array(9).fill(''),\n      xIsNext = true;\n    this.setState({\n      squares: squares,\n      xIsNext: xIsNext,\n      colorClass: colorClass\n    });\n  }\n\n  setColorClass(squares, colorClass) {\n    const winningBlock = calculateWinner(squares);\n    return getWinningColors(colorClass.slice(), winningBlock)\n  }\n  handleClick(i) {\n    const squares = this.state.squares.slice(),\n      winningBlock = calculateWinner(squares);\n    let colorClass = this.state.colorClass.slice();\n    if (winningBlock !== null || squares[i] !== null) {\n      return;\n    }\n    colorClass[i] = this.state.xIsNext === true ? 'red-color' : 'green-color';\n    squares[i] = this.state.xIsNext === true ? 'X' : 'O';\n    colorClass =  getWinningColors(colorClass, calculateWinner(squares));\n    this.props.history.push('/' + getStateToken(squares));\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      colorClass: colorClass\n    });\n  }\n  renderSquare(i) {\n    return <Square \n      value={this.state.squares[i]}\n      textColorClass = {this.state.colorClass[i]}\n      onClick = {() => this.handleClick(i)}\n    />;\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares)\n    let status = '',\n      statusClass = 'status';\n    if (typeof winner === 'string') {\n      status = 'Match Drawn';\n    }\n    else if ( winner !== null) {\n      statusClass += ' winning-block'\n      status = 'Winner ' + this.state.squares[winner[0]];\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext === true? 'X' : 'O');\n    }\n    let board = [];\n    let boardRow = [];\n    for (let i = 0; i < 9; i++) {\n      if ( i > 0 && i % 3 === 0) {\n        board.push(<div className=\"board-row\">{boardRow}</div>)\n        boardRow = []\n      }\n      boardRow.push( <div className=\"board-block\">{this.renderSquare(i)}</div>)\n    }\n    board.push(<div className='board-row'>{boardRow}</div>)\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className={statusClass}>{status}</div>\n          <Reload boardReset = {() => this.boardReset()} />\n          <div>{board}</div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport {Game} from './components/Game'\n\nReactDOM.render(\n  <Router>\n    <Route exact path=\"/:state?\" component={Game} />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}